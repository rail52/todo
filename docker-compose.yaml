services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./api-gateway/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
     - shared_network

  api-gateway-service:
    container_name: api-gateway-service
    build: 
      context: ./api-gateway      
      dockerfile: Dockerfile
    env_file:  
      - ./api-gateway/.env
    volumes:
      - ./api-gateway/.env:/app/.env
    networks:
      - shared_network

  auth-service-postgres:
    image: postgres:15-alpine
    env_file:
      - ./auth/.env
    volumes:
      - postgres_data1:/var/lib/postgresql/data
      - ./auth/migrations:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mentors"]
      interval: 10s
      timeout: 5s
      retries: 5  
    networks:
      - shared_network

  auth-service-redis:
    image: redis:7
    env_file:
      - ./auth/.env
    command: redis-server --requirepass 123
    volumes:
      - redis_data1:/data
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared_network

  auth-service:
    container_name: auth-service
    build:
      context: ./auth
      dockerfile: Dockerfile
    env_file:
      - ./auth/.env
    volumes:
      - ./auth/.env:/app/.env
    depends_on:
      auth-service-redis:
        condition: service_healthy
      auth-service-postgres:
        condition: service_healthy
    networks:
      - shared_network

  todo-app-service:
    build: 
      context: .  
      dockerfile: Dockerfile
    ports:
        - 8082:8082
    env_file:  
      - .env
    volumes:
      - ./.env:/app/.env
    networks:
      - shared_network
    
  todo-app-service-postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - "db:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shared_network
      
  zookeeper:
      image: wurstmeister/zookeeper
      ports:
        - "2181:2181"
      environment:
        ALLOW_ANONYMOUS_LOGIN: "yes"
      networks:
        - shared_network
  
  kafka:
    image: wurstmeister/kafka
    ports:
    - "9092:9092"
    - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - shared_network
    
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8087:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - shared_network


  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    ports:
    - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
    - loki_data:/loki 
    networks:
      - shared_network
      

  promtail:
    ports:
      - 9080:9080
    image: grafana/promtail:2.9.3
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - shared_network
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - shared_network
    depends_on:
      - loki
volumes:
  postgres_data1:
  redis_data1:

networks:
  shared_network:
    external: true